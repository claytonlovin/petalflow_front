{"version":3,"file":"nebular-auth.mjs","sources":["../../../src/framework/auth/auth.options.ts","../../../src/framework/auth/helpers.ts","../../../src/framework/auth/services/token/token.ts","../../../src/framework/auth/services/token/token-parceler.ts","../../../src/framework/auth/services/token/token-storage.ts","../../../src/framework/auth/services/token/token.service.ts","../../../src/framework/auth/services/auth.service.ts","../../../src/framework/auth/strategies/auth-strategy.ts","../../../src/framework/auth/services/auth-result.ts","../../../src/framework/auth/strategies/auth-strategy-options.ts","../../../src/framework/auth/strategies/dummy/dummy-strategy-options.ts","../../../src/framework/auth/strategies/dummy/dummy-strategy.ts","../../../src/framework/auth/strategies/oauth2/oauth2-strategy.options.ts","../../../src/framework/auth/strategies/oauth2/oauth2-strategy.ts","../../../src/framework/auth/strategies/password/password-strategy-options.ts","../../../src/framework/auth/strategies/password/password-strategy.ts","../../../src/framework/auth/components/auth-block/auth-block.component.ts","../../../src/framework/auth/components/auth.component.ts","../../../src/framework/auth/components/login/login.component.ts","../../../src/framework/auth/components/login/login.component.html","../../../src/framework/auth/components/register/register.component.ts","../../../src/framework/auth/components/register/register.component.html","../../../src/framework/auth/components/logout/logout.component.ts","../../../src/framework/auth/components/logout/logout.component.html","../../../src/framework/auth/components/request-password/request-password.component.ts","../../../src/framework/auth/components/request-password/request-password.component.html","../../../src/framework/auth/components/reset-password/reset-password.component.ts","../../../src/framework/auth/components/reset-password/reset-password.component.html","../../../src/framework/auth/auth.module.ts","../../../src/framework/auth/auth.routes.ts","../../../src/framework/auth/services/interceptors/jwt-interceptor.ts","../../../src/framework/auth/services/interceptors/simple-interceptor.ts","../../../src/framework/auth/models/user.ts","../../../src/framework/auth/public_api.ts","../../../src/framework/auth/nebular-auth.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { HttpRequest } from '@angular/common/http';\nimport { NbAuthStrategy } from './strategies/auth-strategy';\nimport { NbAuthStrategyOptions } from './strategies/auth-strategy-options';\nimport { NbAuthToken, NbAuthTokenClass } from './services/token/token';\n\nexport type NbAuthStrategyClass = new (...params: any[]) => NbAuthStrategy;\n\nexport type NbAuthStrategies  = [NbAuthStrategyClass, NbAuthStrategyOptions][];\n\nexport interface NbAuthOptions {\n  forms?: any;\n  strategies?: NbAuthStrategies;\n}\n\nexport interface NbAuthSocialLink {\n  link?: string,\n  url?: string,\n  target?: string,\n  title?: string,\n  icon?: string,\n}\n\nconst socialLinks: NbAuthSocialLink[] = [];\n\nexport const defaultAuthOptions: any = {\n  strategies: [],\n  forms: {\n    login: {\n      redirectDelay: 500, // delay before redirect after a successful login, while success message is shown to the user\n      strategy: 'email',  // provider id key. If you have multiple strategies, or what to use your own\n      rememberMe: true,   // whether to show or not the `rememberMe` checkbox\n      showMessages: {     // show/not show success/error messages\n        success: true,\n        error: true,\n      },\n      socialLinks: socialLinks, // social links at the bottom of a page\n    },\n    register: {\n      redirectDelay: 500,\n      strategy: 'email',\n      showMessages: {\n        success: true,\n        error: true,\n      },\n      terms: true,\n      socialLinks: socialLinks,\n    },\n    requestPassword: {\n      redirectDelay: 500,\n      strategy: 'email',\n      showMessages: {\n        success: true,\n        error: true,\n      },\n      socialLinks: socialLinks,\n    },\n    resetPassword: {\n      redirectDelay: 500,\n      strategy: 'email',\n      showMessages: {\n        success: true,\n        error: true,\n      },\n      socialLinks: socialLinks,\n    },\n    logout: {\n      redirectDelay: 500,\n      strategy: 'email',\n    },\n    validation: {\n      password: {\n        required: true,\n        minLength: 4,\n        maxLength: 50,\n      },\n      email: {\n        required: true,\n      },\n      fullName: {\n        required: false,\n        minLength: 4,\n        maxLength: 50,\n      },\n    },\n  },\n};\n\nexport const NB_AUTH_OPTIONS = new InjectionToken<NbAuthOptions>('Nebular Auth Options');\nexport const NB_AUTH_USER_OPTIONS = new InjectionToken<NbAuthOptions>('Nebular User Auth Options');\nexport const NB_AUTH_STRATEGIES = new InjectionToken<NbAuthStrategies>('Nebular Auth Strategies');\nexport const NB_AUTH_TOKENS = new InjectionToken<NbAuthTokenClass<NbAuthToken>[]>('Nebular Auth Tokens');\nexport const NB_AUTH_INTERCEPTOR_HEADER = new InjectionToken<string>('Nebular Simple Interceptor Header');\nexport const NB_AUTH_TOKEN_INTERCEPTOR_FILTER =\n       new InjectionToken<(req: HttpRequest<any>) => boolean>('Nebular Interceptor Filter');\n\n","/**\n * Extending object that entered in first argument.\n *\n * Returns extended object or false if have no target object or incorrect type.\n *\n * If you wish to clone source object (without modify it), just use empty new\n * object as first argument, like this:\n *   deepExtend({}, yourObj_1, [yourObj_N]);\n */\nexport const deepExtend = function (...objects: any[]): any {\n  if (arguments.length < 1 || typeof arguments[0] !== 'object') {\n    return false;\n  }\n\n  if (arguments.length < 2) {\n    return arguments[0];\n  }\n\n  const target = arguments[0];\n\n  // convert arguments to array and cut off target object\n  const args = Array.prototype.slice.call(arguments, 1);\n\n  let val, src;\n\n  args.forEach(function (obj: any) {\n    // skip argument if it is array or isn't object\n    if (typeof obj !== 'object' || Array.isArray(obj)) {\n      return;\n    }\n\n    Object.keys(obj).forEach(function (key) {\n      src = target[key]; // source value\n      val = obj[key]; // new value\n\n      // recursion prevention\n      if (val === target) {\n        return;\n\n        /**\n         * if new value isn't object then just overwrite by new value\n         * instead of extending.\n         */\n      } else if (typeof val !== 'object' || val === null) {\n        target[key] = val;\n\n        return;\n\n        // just clone arrays (and recursive clone objects inside)\n      } else if (Array.isArray(val)) {\n        target[key] = deepCloneArray(val);\n\n        return;\n\n        // custom cloning and overwrite for specific objects\n      } else if (isSpecificValue(val)) {\n        target[key] = cloneSpecificValue(val);\n\n        return;\n\n        // overwrite by new value if source isn't object or array\n      } else if (typeof src !== 'object' || src === null || Array.isArray(src)) {\n        target[key] = deepExtend({}, val);\n\n        return;\n\n        // source value and new value is objects both, extending...\n      } else {\n        target[key] = deepExtend(src, val);\n\n        return;\n      }\n    });\n  });\n\n  return target;\n};\n\nfunction isSpecificValue(val: any) {\n  return (\n    val instanceof Date\n    || val instanceof RegExp\n  ) ? true : false;\n}\n\nfunction cloneSpecificValue(val: any): any {\n  if (val instanceof Date) {\n    return new Date(val.getTime());\n  } else if (val instanceof RegExp) {\n    return new RegExp(val);\n  } else {\n    throw new Error('cloneSpecificValue: Unexpected situation');\n  }\n}\n\n/**\n * Recursive cloning array.\n */\nfunction deepCloneArray(arr: any[]): any {\n  const clone: any[] = [];\n  arr.forEach(function (item: any, index: any) {\n    if (typeof item === 'object' && item !== null) {\n      if (Array.isArray(item)) {\n        clone[index] = deepCloneArray(item);\n      } else if (isSpecificValue(item)) {\n        clone[index] = cloneSpecificValue(item);\n      } else {\n        clone[index] = deepExtend({}, item);\n      }\n    } else {\n      clone[index] = item;\n    }\n  });\n\n  return clone;\n}\n\n// getDeepFromObject({result: {data: 1}}, 'result.data', 2); // returns 1\nexport function getDeepFromObject(object = {}, name: string, defaultValue?: any) {\n  const keys = name.split('.');\n  // clone the object\n  let level = deepExtend({}, object || {});\n  keys.forEach((k) => {\n    if (level && typeof level[k] !== 'undefined') {\n      level = level[k];\n    } else {\n      level = undefined;\n    }\n  });\n\n  return typeof level === 'undefined' ? defaultValue : level;\n}\n\nexport function urlBase64Decode(str: string): string {\n  let output = str.replace(/-/g, '+').replace(/_/g, '/');\n  switch (output.length % 4) {\n    case 0: { break; }\n    case 2: { output += '=='; break; }\n    case 3: { output += '='; break; }\n    default: {\n      throw new Error('Illegal base64url string!');\n    }\n  }\n  return b64DecodeUnicode(output);\n}\n\nexport function b64decode(str: string): string {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n  let output: string = '';\n\n  str = String(str).replace(/=+$/, '');\n\n  if (str.length % 4 === 1) {\n    throw new Error(`'atob' failed: The string to be decoded is not correctly encoded.`);\n  }\n\n  for (\n    // initialize result and counters\n    let bc: number = 0, bs: any, buffer: any, idx: number = 0;\n    // get next character\n    buffer = str.charAt(idx++);\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n      // and if not first of each 4 characters,\n      // convert the first 8 bits to one ascii character\n    bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n  ) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\n\n// https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\nexport function b64DecodeUnicode(str: any) {\n  return decodeURIComponent(Array.prototype.map.call(b64decode(str), (c: any) => {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n}\n","import { urlBase64Decode } from '../../helpers';\n\nexport abstract class NbAuthToken {\n\n  protected payload: any = null;\n\n  abstract getValue(): string;\n  abstract isValid(): boolean;\n  // the strategy name used to acquire this token (needed for refreshing token)\n  abstract getOwnerStrategyName(): string;\n  abstract getCreatedAt(): Date;\n  abstract toString(): string;\n\n  getName(): string {\n    return (this.constructor as NbAuthTokenClass).NAME;\n  }\n\n  getPayload(): any {\n    return this.payload;\n  }\n}\n\nexport class NbAuthTokenNotFoundError extends Error {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\nexport class NbAuthIllegalTokenError extends Error {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\nexport class NbAuthEmptyTokenError extends NbAuthIllegalTokenError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\nexport class NbAuthIllegalJWTTokenError extends NbAuthIllegalTokenError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\nexport interface NbAuthRefreshableToken {\n  getRefreshToken(): string;\n  setRefreshToken(refreshToken: string);\n}\n\nexport interface NbAuthTokenClass<T = NbAuthToken> {\n  NAME: string;\n  new (raw: any, strategyName: string, expDate?: Date): T;\n}\n\nexport function nbAuthCreateToken<T extends NbAuthToken>(tokenClass: NbAuthTokenClass<T>,\n                                  token: any,\n                                  ownerStrategyName: string,\n                                  createdAt?: Date) {\n  return new tokenClass(token, ownerStrategyName, createdAt);\n}\n\nexport function decodeJwtPayload(payload: string): any {\n\n  if (payload.length === 0) {\n    throw new NbAuthEmptyTokenError('Cannot extract from an empty payload.');\n  }\n\n  const parts = payload.split('.');\n\n  if (parts.length !== 3) {\n    throw new NbAuthIllegalJWTTokenError(\n      `The payload ${payload} is not valid JWT payload and must consist of three parts.`);\n  }\n\n  let decoded;\n  try {\n    decoded = urlBase64Decode(parts[1]);\n  } catch (e) {\n    throw new NbAuthIllegalJWTTokenError(\n      `The payload ${payload} is not valid JWT payload and cannot be parsed.`);\n  }\n\n  if (!decoded) {\n    throw new NbAuthIllegalJWTTokenError(\n      `The payload ${payload} is not valid JWT payload and cannot be decoded.`);\n  }\n  return JSON.parse(decoded);\n}\n\n/**\n * Wrapper for simple (text) token\n */\nexport class NbAuthSimpleToken extends NbAuthToken {\n\n  static NAME = 'nb:auth:simple:token';\n\n  constructor(protected readonly token: any,\n              protected readonly ownerStrategyName: string,\n              protected createdAt?: Date) {\n    super();\n    try {\n      this.parsePayload();\n    } catch (err) {\n      if (!(err instanceof NbAuthTokenNotFoundError)) {\n        // token is present but has got a problem, including illegal\n        throw err;\n      }\n    }\n    this.createdAt = this.prepareCreatedAt(createdAt);\n  }\n\n  protected parsePayload(): any {\n    this.payload = null;\n  }\n\n  protected prepareCreatedAt(date: Date) {\n    return date ? date : new Date();\n  }\n\n  /**\n   * Returns the token's creation date\n   * @returns {Date}\n   */\n  getCreatedAt(): Date {\n    return this.createdAt;\n  }\n\n  /**\n   * Returns the token value\n   * @returns string\n   */\n  getValue(): string {\n    return this.token;\n  }\n\n  getOwnerStrategyName(): string {\n    return this.ownerStrategyName;\n  }\n\n  /**\n   * Is non empty and valid\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return !!this.getValue();\n  }\n\n  /**\n   * Validate value and convert to string, if value is not valid return empty string\n   * @returns {string}\n   */\n  toString(): string {\n    return !!this.token ? this.token : '';\n  }\n}\n\n/**\n * Wrapper for JWT token with additional methods.\n */\nexport class NbAuthJWTToken extends NbAuthSimpleToken {\n\n  static NAME = 'nb:auth:jwt:token';\n\n  /**\n   * for JWT token, the iat (issued at) field of the token payload contains the creation Date\n   */\n  protected prepareCreatedAt(date: Date) {\n      const decoded = this.getPayload();\n      return decoded && decoded.iat ? new Date(Number(decoded.iat) * 1000) : super.prepareCreatedAt(date);\n  }\n\n  /**\n   * Returns payload object\n   * @returns any\n   */\n  protected parsePayload(): void {\n    if (!this.token) {\n      throw new NbAuthTokenNotFoundError('Token not found. ')\n    }\n    this.payload = decodeJwtPayload(this.token);\n  }\n\n  /**\n   * Returns expiration date\n   * @returns Date\n   */\n  getTokenExpDate(): Date {\n    const decoded = this.getPayload();\n    if (decoded && !decoded.hasOwnProperty('exp')) {\n      return null;\n    }\n    const date = new Date(0);\n    date.setUTCSeconds(decoded.exp); // 'cause jwt token are set in seconds\n    return date;\n  }\n\n  /**\n   * Is data expired\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return super.isValid() && (!this.getTokenExpDate() || new Date() < this.getTokenExpDate());\n  }\n}\n\nconst prepareOAuth2Token = (data) => {\n  if (typeof data === 'string') {\n    try {\n      return JSON.parse(data);\n    } catch (e) {}\n  }\n  return data;\n};\n\n/**\n * Wrapper for OAuth2 token whose access_token is a JWT Token\n */\nexport class NbAuthOAuth2Token extends NbAuthSimpleToken {\n\n  static NAME = 'nb:auth:oauth2:token';\n\n  constructor( data: { [key: string]: string|number }|string = {},\n               ownerStrategyName: string,\n               createdAt?: Date) {\n\n    // we may get it as string when retrieving from a storage\n    super(prepareOAuth2Token(data), ownerStrategyName, createdAt);\n  }\n\n  /**\n   * Returns the token value\n   * @returns string\n   */\n  getValue(): string {\n    return this.token.access_token;\n  }\n\n  /**\n   * Returns the refresh token\n   * @returns string\n   */\n  getRefreshToken(): string {\n    return this.token.refresh_token;\n  }\n\n  /**\n   *  put refreshToken in the token payload\n    * @param refreshToken\n   */\n  setRefreshToken(refreshToken: string) {\n    this.token.refresh_token = refreshToken;\n  }\n\n  /**\n   * Parses token payload\n   * @returns any\n   */\n  protected parsePayload(): void {\n    if (!this.token) {\n      throw new NbAuthTokenNotFoundError('Token not found.')\n    } else {\n      if (!Object.keys(this.token).length) {\n        throw new NbAuthEmptyTokenError('Cannot extract payload from an empty token.');\n      }\n    }\n    this.payload = this.token;\n  }\n\n  /**\n   * Returns the token type\n   * @returns string\n   */\n  getType(): string {\n    return this.token.token_type;\n  }\n\n  /**\n   * Is data expired\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return super.isValid() && (!this.getTokenExpDate() || new Date() < this.getTokenExpDate());\n  }\n\n  /**\n   * Returns expiration date\n   * @returns Date\n   */\n  getTokenExpDate(): Date {\n    if (!this.token.hasOwnProperty('expires_in')) {\n      return null;\n    }\n    return new Date(this.createdAt.getTime() + Number(this.token.expires_in) * 1000);\n}\n\n  /**\n   * Convert to string\n   * @returns {string}\n   */\n  toString(): string {\n    return JSON.stringify(this.token);\n  }\n}\n\n/**\n * Wrapper for OAuth2 token embedding JWT tokens\n */\nexport class NbAuthOAuth2JWTToken extends NbAuthOAuth2Token {\n\n  static NAME = 'nb:auth:oauth2:jwt:token';\n\n  protected accessTokenPayload: any;\n\n  protected parsePayload(): void {\n    super.parsePayload();\n    this.parseAccessTokenPayload();\n  }\n\n  protected parseAccessTokenPayload(): any {\n    const accessToken = this.getValue();\n    if (!accessToken) {\n      throw new NbAuthTokenNotFoundError('access_token key not found.')\n    }\n    this.accessTokenPayload = decodeJwtPayload(accessToken);\n  }\n\n  /**\n   * Returns access token payload\n   * @returns any\n   */\n  getAccessTokenPayload(): any {\n    return this.accessTokenPayload;\n  }\n\n  /**\n   * for Oauth2 JWT token, the iat (issued at) field of the access_token payload\n   */\n  protected prepareCreatedAt(date: Date) {\n    const payload = this.accessTokenPayload;\n    return payload && payload.iat ? new Date(Number(payload.iat) * 1000) : super.prepareCreatedAt(date);\n  }\n\n  /**\n   * Is token valid\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return this.accessTokenPayload && super.isValid();\n  }\n\n  /**\n   * Returns expiration date :\n   * - exp if set,\n   * - super.getExpDate() otherwise\n   * @returns Date\n   */\n  getTokenExpDate(): Date {\n    if (this.accessTokenPayload && this.accessTokenPayload.hasOwnProperty('exp')) {\n      const date = new Date(0);\n      date.setUTCSeconds(this.accessTokenPayload.exp);\n      return date;\n    } else {\n      return super.getTokenExpDate();\n    }\n  }\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nimport { nbAuthCreateToken, NbAuthToken, NbAuthTokenClass } from './token';\nimport { NB_AUTH_TOKENS } from '../../auth.options';\n\nexport interface NbTokenPack {\n  name: string,\n  ownerStrategyName: string,\n  createdAt: Number,\n  value: string,\n}\n\nexport const NB_AUTH_FALLBACK_TOKEN = new InjectionToken<NbAuthTokenClass>('Nebular Auth Options');\n\n/**\n * Creates a token parcel which could be stored/restored\n */\n@Injectable()\nexport class NbAuthTokenParceler {\n\n  constructor(@Inject(NB_AUTH_FALLBACK_TOKEN) private fallbackClass: NbAuthTokenClass,\n              @Inject(NB_AUTH_TOKENS) private tokenClasses: NbAuthTokenClass[]) {\n  }\n\n  wrap(token: NbAuthToken): string {\n    return JSON.stringify({\n      name: token.getName(),\n      ownerStrategyName: token.getOwnerStrategyName(),\n      createdAt: token.getCreatedAt().getTime(),\n      value: token.toString(),\n    });\n  }\n\n  unwrap(value: string): NbAuthToken {\n    let tokenClass: NbAuthTokenClass = this.fallbackClass;\n    let tokenValue = '';\n    let tokenOwnerStrategyName = '';\n    let tokenCreatedAt: Date = null;\n\n    const tokenPack: NbTokenPack = this.parseTokenPack(value);\n    if (tokenPack) {\n      tokenClass = this.getClassByName(tokenPack.name) || this.fallbackClass;\n      tokenValue = tokenPack.value;\n      tokenOwnerStrategyName = tokenPack.ownerStrategyName;\n      tokenCreatedAt = new Date(Number(tokenPack.createdAt));\n    }\n\n    return nbAuthCreateToken(tokenClass, tokenValue, tokenOwnerStrategyName, tokenCreatedAt);\n\n  }\n\n  // TODO: this could be moved to a separate token registry\n  protected getClassByName(name): NbAuthTokenClass {\n    return this.tokenClasses.find((tokenClass: NbAuthTokenClass) => tokenClass.NAME === name);\n  }\n\n  protected parseTokenPack(value): NbTokenPack {\n    try {\n      return JSON.parse(value);\n    } catch (e) { }\n    return null;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { NbAuthToken } from './token';\nimport { NbAuthTokenParceler } from './token-parceler';\n\nexport abstract class NbTokenStorage {\n\n  abstract get(): NbAuthToken;\n  abstract set(token: NbAuthToken);\n  abstract clear();\n}\n\n/**\n * Service that uses browser localStorage as a storage.\n *\n * The token storage is provided into auth module the following way:\n * ```ts\n * { provide: NbTokenStorage, useClass: NbTokenLocalStorage },\n * ```\n *\n * If you need to change the storage behaviour or provide your own - just extend your class from basic `NbTokenStorage`\n * or `NbTokenLocalStorage` and provide in your `app.module`:\n * ```ts\n * { provide: NbTokenStorage, useClass: NbTokenCustomStorage },\n * ```\n *\n */\n@Injectable()\nexport class NbTokenLocalStorage extends NbTokenStorage {\n\n  protected key = 'auth_app_token';\n\n  constructor(private parceler: NbAuthTokenParceler) {\n    super();\n  }\n\n  /**\n   * Returns token from localStorage\n   * @returns {NbAuthToken}\n   */\n  get(): NbAuthToken {\n    const raw = localStorage.getItem(this.key);\n    return this.parceler.unwrap(raw);\n  }\n\n  /**\n   * Sets token to localStorage\n   * @param {NbAuthToken} token\n   */\n  set(token: NbAuthToken) {\n    const raw = this.parceler.wrap(token);\n    localStorage.setItem(this.key, raw);\n  }\n\n  /**\n   * Clears token from localStorage\n   */\n  clear() {\n    localStorage.removeItem(this.key);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject, of as observableOf } from 'rxjs';\nimport { filter, share } from 'rxjs/operators';\n\nimport { NbTokenStorage } from './token-storage';\nimport { NbAuthToken } from './token';\n\n/**\n * Service that allows you to manage authentication token - get, set, clear and also listen to token changes over time.\n */\n@Injectable()\nexport class NbTokenService {\n\n  protected token$: BehaviorSubject<NbAuthToken> = new BehaviorSubject(null);\n\n  constructor(protected tokenStorage: NbTokenStorage) {\n    this.publishStoredToken();\n  }\n\n  /**\n   * Publishes token when it changes.\n   * @returns {Observable<NbAuthToken>}\n   */\n  tokenChange(): Observable<NbAuthToken> {\n    return this.token$\n      .pipe(\n        filter(value => !!value),\n        share(),\n      );\n  }\n\n  /**\n   * Sets a token into the storage. This method is used by the NbAuthService automatically.\n   *\n   * @param {NbAuthToken} token\n   * @returns {Observable<any>}\n   */\n  set(token: NbAuthToken): Observable<null> {\n    this.tokenStorage.set(token);\n    this.publishStoredToken();\n    return observableOf(null);\n  }\n\n  /**\n   * Returns observable of current token\n   * @returns {Observable<NbAuthToken>}\n   */\n  get(): Observable<NbAuthToken> {\n    const token = this.tokenStorage.get();\n    return observableOf(token);\n  }\n\n  /**\n   * Removes the token and published token value\n   *\n   * @returns {Observable<any>}\n   */\n  clear(): Observable<null> {\n    this.tokenStorage.clear();\n    this.publishStoredToken();\n    return observableOf(null);\n  }\n\n  protected publishStoredToken() {\n    this.token$.next(this.tokenStorage.get());\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Inject, Injectable } from '@angular/core';\n\nimport { Observable, of as observableOf } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\nimport { NbAuthStrategy } from '../strategies/auth-strategy';\nimport { NB_AUTH_STRATEGIES } from '../auth.options';\nimport { NbAuthResult } from './auth-result';\nimport { NbTokenService } from './token/token.service';\nimport { NbAuthToken } from './token/token';\n\n/**\n * Common authentication service.\n * Should be used to as an interlayer between UI Components and Auth Strategy.\n */\n@Injectable()\nexport class NbAuthService {\n\n  constructor(protected tokenService: NbTokenService,\n              @Inject(NB_AUTH_STRATEGIES) protected strategies) {\n  }\n\n  /**\n   * Retrieves current authenticated token stored\n   * @returns {Observable<any>}\n   */\n  getToken(): Observable<NbAuthToken> {\n    return this.tokenService.get();\n  }\n\n  /**\n   * Returns true if auth token is present in the token storage\n   * @returns {Observable<boolean>}\n   */\n  isAuthenticated(): Observable<boolean> {\n    return this.getToken()\n      .pipe(map((token: NbAuthToken) => token.isValid()));\n  }\n\n  /**\n   * Returns true if valid auth token is present in the token storage.\n   * If not, calls the strategy refreshToken, and returns isAuthenticated() if success, false otherwise\n   * @returns {Observable<boolean>}\n   */\n  isAuthenticatedOrRefresh(): Observable<boolean> {\n    return this.getToken()\n      .pipe(\n        switchMap(token => {\n        if (token.getValue() && !token.isValid()) {\n          return this.refreshToken(token.getOwnerStrategyName(), token)\n            .pipe(\n              switchMap(res => {\n                if (res.isSuccess()) {\n                  return this.isAuthenticated();\n                } else {\n                  return observableOf(false);\n                }\n              }),\n            )\n        } else {\n          return observableOf(token.isValid());\n        }\n    }));\n  }\n\n  /**\n   * Returns tokens stream\n   * @returns {Observable<NbAuthSimpleToken>}\n   */\n  onTokenChange(): Observable<NbAuthToken> {\n    return this.tokenService.tokenChange();\n  }\n\n  /**\n   * Returns authentication status stream\n   * @returns {Observable<boolean>}\n   */\n  onAuthenticationChange(): Observable<boolean> {\n    return this.onTokenChange()\n      .pipe(map((token: NbAuthToken) => token.isValid()));\n  }\n\n  /**\n   * Authenticates with the selected strategy\n   * Stores received token in the token storage\n   *\n   * Example:\n   * authenticate('email', {email: 'email@example.com', password: 'test'})\n   *\n   * @param strategyName\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  authenticate(strategyName: string, data?: any): Observable<NbAuthResult> {\n    return this.getStrategy(strategyName).authenticate(data)\n      .pipe(\n        switchMap((result: NbAuthResult) => {\n          return this.processResultToken(result);\n        }),\n      );\n  }\n\n  /**\n   * Registers with the selected strategy\n   * Stores received token in the token storage\n   *\n   * Example:\n   * register('email', {email: 'email@example.com', name: 'Some Name', password: 'test'})\n   *\n   * @param strategyName\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  register(strategyName: string, data?: any): Observable<NbAuthResult> {\n    return this.getStrategy(strategyName).register(data)\n      .pipe(\n        switchMap((result: NbAuthResult) => {\n          return this.processResultToken(result);\n        }),\n      );\n  }\n\n  /**\n   * Sign outs with the selected strategy\n   * Removes token from the token storage\n   *\n   * Example:\n   * logout('email')\n   *\n   * @param strategyName\n   * @returns {Observable<NbAuthResult>}\n   */\n  logout(strategyName: string): Observable<NbAuthResult> {\n    return this.getStrategy(strategyName).logout()\n      .pipe(\n        switchMap((result: NbAuthResult) => {\n          if (result.isSuccess()) {\n            this.tokenService.clear()\n              .pipe(map(() => result));\n          }\n          return observableOf(result);\n        }),\n      );\n  }\n\n  /**\n   * Sends forgot password request to the selected strategy\n   *\n   * Example:\n   * requestPassword('email', {email: 'email@example.com'})\n   *\n   * @param strategyName\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  requestPassword(strategyName: string, data?: any): Observable<NbAuthResult> {\n    return this.getStrategy(strategyName).requestPassword(data);\n  }\n\n  /**\n   * Tries to reset password with the selected strategy\n   *\n   * Example:\n   * resetPassword('email', {newPassword: 'test'})\n   *\n   * @param strategyName\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  resetPassword(strategyName: string, data?: any): Observable<NbAuthResult> {\n    return this.getStrategy(strategyName).resetPassword(data);\n  }\n\n  /**\n   * Sends a refresh token request\n   * Stores received token in the token storage\n   *\n   * Example:\n   * refreshToken('email', {token: token})\n   *\n   * @param {string} strategyName\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  refreshToken(strategyName: string, data?: any): Observable<NbAuthResult> {\n    return this.getStrategy(strategyName).refreshToken(data)\n      .pipe(\n        switchMap((result: NbAuthResult) => {\n          return this.processResultToken(result);\n        }),\n      );\n  }\n\n  /**\n   * Get registered strategy by name\n   *\n   * Example:\n   * getStrategy('email')\n   *\n   * @param {string} provider\n   * @returns {NbAbstractAuthProvider}\n   */\n  protected getStrategy(strategyName: string): NbAuthStrategy {\n    const found = this.strategies.find((strategy: NbAuthStrategy) => strategy.getName() === strategyName);\n\n    if (!found) {\n      throw new TypeError(`There is no Auth Strategy registered under '${strategyName}' name`);\n    }\n\n    return found;\n  }\n\n  private processResultToken(result: NbAuthResult) {\n    if (result.isSuccess() && result.getToken()) {\n      return this.tokenService.set(result.getToken())\n        .pipe(\n          map((token: NbAuthToken) => {\n            return result;\n          }),\n        );\n    }\n\n    return observableOf(result);\n  }\n}\n","import { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { NbAuthResult } from '../services/auth-result';\nimport { NbAuthStrategyOptions } from './auth-strategy-options';\nimport { deepExtend, getDeepFromObject } from '../helpers';\nimport { NbAuthToken, nbAuthCreateToken, NbAuthIllegalTokenError } from '../services/token/token';\n\nexport abstract class NbAuthStrategy {\n  protected defaultOptions: NbAuthStrategyOptions;\n  protected options: NbAuthStrategyOptions;\n\n  // we should keep this any and validation should be done in `register` method instead\n  // otherwise it won't be possible to pass an empty object\n  setOptions(options: any): void {\n    this.options = deepExtend({}, this.defaultOptions, options);\n  }\n\n  getOption(key: string): any {\n    return getDeepFromObject(this.options, key, null);\n  }\n\n  createToken<T extends NbAuthToken>(value: any, failWhenInvalidToken?: boolean): T {\n    const token = nbAuthCreateToken<T>(this.getOption('token.class'), value, this.getName());\n    // At this point, nbAuthCreateToken failed with NbAuthIllegalTokenError which MUST be intercepted by strategies\n    // Or token is created. It MAY be created even if backend did not return any token, in this case it is !Valid\n    if (failWhenInvalidToken && !token.isValid()) {\n      // If we require a valid token (i.e. isValid), then we MUST throw NbAuthIllegalTokenError so that the strategies\n      // intercept it\n      throw new NbAuthIllegalTokenError('Token is empty or invalid.');\n    }\n    return token;\n  }\n\n  getName(): string {\n    return this.getOption('name');\n  }\n\n  abstract authenticate(data?: any): Observable<NbAuthResult>;\n\n  abstract register(data?: any): Observable<NbAuthResult>;\n\n  abstract requestPassword(data?: any): Observable<NbAuthResult>;\n\n  abstract resetPassword(data?: any): Observable<NbAuthResult>;\n\n  abstract logout(): Observable<NbAuthResult>;\n\n  abstract refreshToken(data?: any): Observable<NbAuthResult>;\n\n  protected createFailResponse(data?: any): HttpResponse<Object> {\n    return new HttpResponse<Object>({ body: {}, status: 401 });\n  }\n\n  protected createSuccessResponse(data?: any): HttpResponse<Object> {\n    return new HttpResponse<Object>({ body: {}, status: 200 });\n  }\n\n  protected getActionEndpoint(action: string): string {\n    const actionEndpoint: string = this.getOption(`${action}.endpoint`);\n    const baseEndpoint: string = this.getOption('baseEndpoint');\n    return actionEndpoint ? baseEndpoint + actionEndpoint : '';\n  }\n\n  protected getHeaders(): HttpHeaders {\n    const customHeaders: NbAuthStrategyOptions['headers'] = this.getOption('headers') ?? {};\n    if (customHeaders instanceof HttpHeaders) {\n      return customHeaders;\n    }\n\n    let headers = new HttpHeaders();\n    Object.entries(customHeaders).forEach(([key, value]) => {\n      headers = headers.append(key, value);\n    });\n    return headers;\n  }\n}\n","import { NbAuthToken } from './token/token';\n\nexport class NbAuthResult {\n\n  protected token: NbAuthToken;\n  protected errors: string[] = [];\n  protected messages: string[] = [];\n\n  // TODO: better pass object\n  constructor(protected success: boolean,\n              protected response?: any,\n              protected redirect?: any,\n              errors?: any,\n              messages?: any,\n              token: NbAuthToken = null) {\n\n    this.errors = this.errors.concat([errors]);\n    if (errors instanceof Array) {\n      this.errors = errors;\n    }\n\n    this.messages = this.messages.concat([messages]);\n    if (messages instanceof Array) {\n      this.messages = messages;\n    }\n\n    this.token = token;\n  }\n\n  getResponse(): any {\n    return this.response;\n  }\n\n  getToken(): NbAuthToken {\n    return this.token;\n  }\n\n  getRedirect(): string {\n    return this.redirect;\n  }\n\n  getErrors(): string[] {\n    return this.errors.filter(val => !!val);\n  }\n\n  getMessages(): string[] {\n    return this.messages.filter(val => !!val);\n  }\n\n  isSuccess(): boolean {\n    return this.success;\n  }\n\n  isFailure(): boolean {\n    return !this.success;\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { HttpHeaders } from '@angular/common/http';\nimport { NbAuthTokenClass } from '../services/token/token';\n\nexport interface NbStrategyToken {\n  class?: NbAuthTokenClass;\n  [key: string]: any;\n}\n\nexport class NbAuthStrategyOptions {\n  name: string;\n  token?: NbStrategyToken;\n  headers?: HttpHeaders | { [header: string]: string | string[]; };\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { NbAuthStrategyOptions, NbStrategyToken } from '../auth-strategy-options';\nimport { NbAuthSimpleToken } from '../../services/token/token';\n\nexport class NbDummyAuthStrategyOptions extends NbAuthStrategyOptions {\n  token?: NbStrategyToken = {\n    class: NbAuthSimpleToken,\n  };\n  delay?: number = 1000;\n  alwaysFail?: boolean = false;\n}\n\nexport const dummyStrategyOptions: NbDummyAuthStrategyOptions = new NbDummyAuthStrategyOptions();\n","import { Injectable } from '@angular/core';\n\nimport { Observable, of as observableOf } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport { NbAuthStrategy } from '../auth-strategy';\nimport { NbAuthResult } from '../../services/auth-result';\nimport { NbDummyAuthStrategyOptions, dummyStrategyOptions } from './dummy-strategy-options';\nimport { NbAuthStrategyClass } from '../../auth.options';\n\n/**\n * Dummy auth strategy. Could be useful for auth setup when backend is not available yet.\n *\n *\n * Strategy settings.\n *\n * ```ts\n * export class NbDummyAuthStrategyOptions extends NbAuthStrategyOptions {\n *   name = 'dummy';\n *   token = {\n *     class: NbAuthSimpleToken,\n *   };\n *   delay? = 1000;\n *   alwaysFail? = false;\n * }\n * ```\n */\n@Injectable()\nexport class NbDummyAuthStrategy extends NbAuthStrategy {\n  protected defaultOptions: NbDummyAuthStrategyOptions = dummyStrategyOptions;\n\n  static setup(options: NbDummyAuthStrategyOptions): [NbAuthStrategyClass, NbDummyAuthStrategyOptions] {\n    return [NbDummyAuthStrategy, options];\n  }\n\n  authenticate(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data)).pipe(delay(this.getOption('delay')));\n  }\n\n  register(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data)).pipe(delay(this.getOption('delay')));\n  }\n\n  requestPassword(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data)).pipe(delay(this.getOption('delay')));\n  }\n\n  resetPassword(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data)).pipe(delay(this.getOption('delay')));\n  }\n\n  logout(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data)).pipe(delay(this.getOption('delay')));\n  }\n\n  refreshToken(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data)).pipe(delay(this.getOption('delay')));\n  }\n\n  protected createDummyResult(data?: any): NbAuthResult {\n    if (this.getOption('alwaysFail')) {\n      return new NbAuthResult(false, this.createFailResponse(data), null, ['Something went wrong.']);\n    }\n\n    try {\n      const token = this.createToken('test token', true);\n      return new NbAuthResult(true, this.createSuccessResponse(data), '/', [], ['Successfully logged in.'], token);\n    } catch (err) {\n      return new NbAuthResult(false, this.createFailResponse(data), null, [(err as Error).message]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { NbAuthOAuth2Token, NbAuthTokenClass } from '../../services/token/token';\nimport { NbAuthStrategyOptions } from '../auth-strategy-options';\n\nexport enum NbOAuth2ResponseType {\n  CODE = 'code',\n  TOKEN = 'token',\n}\n\n// TODO: client_credentials\nexport enum NbOAuth2GrantType {\n  AUTHORIZATION_CODE = 'authorization_code',\n  PASSWORD = 'password',\n  REFRESH_TOKEN = 'refresh_token',\n}\n\nexport enum NbOAuth2ClientAuthMethod {\n  NONE = 'none',\n  BASIC = 'basic',\n  REQUEST_BODY = 'request-body',\n}\n\nexport class NbOAuth2AuthStrategyOptions extends NbAuthStrategyOptions {\n  baseEndpoint?: string = '';\n  clientId: string = '';\n  clientSecret?: string = '';\n  clientAuthMethod?: string = NbOAuth2ClientAuthMethod.NONE;\n  redirect?: { success?: string; failure?: string } = {\n    success: '/',\n    failure: null,\n  };\n  defaultErrors?: any[] = ['Something went wrong, please try again.'];\n  defaultMessages?: any[] = ['You have been successfully authenticated.'];\n  authorize?: {\n    endpoint?: string;\n    redirectUri?: string;\n    responseType?: string;\n    requireValidToken?: boolean; // used only with NbOAuth2ResponseType.TOKEN\n    scope?: string;\n    state?: string;\n    params?: { [key: string]: string };\n  } = {\n    endpoint: 'authorize',\n    responseType: NbOAuth2ResponseType.CODE,\n    requireValidToken: true,\n  };\n  token?: {\n    endpoint?: string;\n    grantType?: string;\n    redirectUri?: string;\n    scope?: string; // Used only with 'password' grantType\n    requireValidToken?: boolean;\n    class: NbAuthTokenClass,\n  } = {\n    endpoint: 'token',\n    grantType: NbOAuth2GrantType.AUTHORIZATION_CODE,\n    requireValidToken: true,\n    class: NbAuthOAuth2Token,\n  };\n  refresh?: {\n    endpoint?: string;\n    grantType?: string;\n    scope?: string;\n    requireValidToken?: boolean;\n  } = {\n    endpoint: 'token',\n    grantType: NbOAuth2GrantType.REFRESH_TOKEN,\n    requireValidToken: true,\n  };\n}\n\nexport const auth2StrategyOptions: NbOAuth2AuthStrategyOptions = new NbOAuth2AuthStrategyOptions();\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { NB_WINDOW } from '@nebular/theme';\n\nimport { NbAuthStrategy } from '../auth-strategy';\nimport { NbAuthIllegalTokenError, NbAuthRefreshableToken, NbAuthToken } from '../../services/token/token';\nimport { NbAuthResult } from '../../services/auth-result';\nimport {\n  NbOAuth2AuthStrategyOptions,\n  NbOAuth2ResponseType,\n  auth2StrategyOptions,\n  NbOAuth2GrantType,\n  NbOAuth2ClientAuthMethod,\n} from './oauth2-strategy.options';\nimport { NbAuthStrategyClass } from '../../auth.options';\n\n/**\n * OAuth2 authentication strategy.\n *\n * Strategy settings:\n *\n * ```ts\n * export enum NbOAuth2ResponseType {\n *   CODE = 'code',\n *   TOKEN = 'token',\n * }\n *\n * export enum NbOAuth2GrantType {\n *   AUTHORIZATION_CODE = 'authorization_code',\n *   PASSWORD = 'password',\n *   REFRESH_TOKEN = 'refresh_token',\n * }\n *\n * export class NbOAuth2AuthStrategyOptions {\n *   name: string;\n *   baseEndpoint?: string = '';\n *   clientId: string = '';\n *   clientSecret: string = '';\n *   clientAuthMethod: string = NbOAuth2ClientAuthMethod.NONE;\n *   redirect?: { success?: string; failure?: string } = {\n *     success: '/',\n *     failure: null,\n *   };\n *   defaultErrors?: any[] = ['Something went wrong, please try again.'];\n *   defaultMessages?: any[] = ['You have been successfully authenticated.'];\n *   authorize?: {\n *     endpoint?: string;\n *     redirectUri?: string;\n *     responseType?: string;\n *     requireValidToken: true,\n *     scope?: string;\n *     state?: string;\n *     params?: { [key: string]: string };\n *   } = {\n *     endpoint: 'authorize',\n *     responseType: NbOAuth2ResponseType.CODE,\n *   };\n *   token?: {\n *     endpoint?: string;\n *     grantType?: string;\n *     requireValidToken: true,\n *     redirectUri?: string;\n *     scope?: string;\n *     class: NbAuthTokenClass,\n *   } = {\n *     endpoint: 'token',\n *     grantType: NbOAuth2GrantType.AUTHORIZATION_CODE,\n *     class: NbAuthOAuth2Token,\n *   };\n *   refresh?: {\n *     endpoint?: string;\n *     grantType?: string;\n *     scope?: string;\n *     requireValidToken: true,\n *   } = {\n *     endpoint: 'token',\n *     grantType: NbOAuth2GrantType.REFRESH_TOKEN,\n *   };\n * }\n * ```\n *\n */\n@Injectable()\nexport class NbOAuth2AuthStrategy extends NbAuthStrategy {\n  static setup(options: NbOAuth2AuthStrategyOptions): [NbAuthStrategyClass, NbOAuth2AuthStrategyOptions] {\n    return [NbOAuth2AuthStrategy, options];\n  }\n\n  get responseType() {\n    return this.getOption('authorize.responseType');\n  }\n\n  get clientAuthMethod() {\n    return this.getOption('clientAuthMethod');\n  }\n\n  protected redirectResultHandlers: { [key: string]: Function } = {\n    [NbOAuth2ResponseType.CODE]: () => {\n      return observableOf(this.route.snapshot.queryParams).pipe(\n        switchMap((params: any) => {\n          if (params.code) {\n            return this.requestToken(params.code);\n          }\n\n          return observableOf(\n            new NbAuthResult(false, params, this.getOption('redirect.failure'), this.getOption('defaultErrors'), []),\n          );\n        }),\n      );\n    },\n    [NbOAuth2ResponseType.TOKEN]: () => {\n      const module = 'authorize';\n      const requireValidToken = this.getOption(`${module}.requireValidToken`);\n      return observableOf(this.route.snapshot.fragment).pipe(\n        map((fragment) => this.parseHashAsQueryParams(fragment)),\n        map((params: any) => {\n          if (!params.error) {\n            return new NbAuthResult(\n              true,\n              params,\n              this.getOption('redirect.success'),\n              [],\n              this.getOption('defaultMessages'),\n              this.createToken(params, requireValidToken),\n            );\n          }\n          return new NbAuthResult(\n            false,\n            params,\n            this.getOption('redirect.failure'),\n            this.getOption('defaultErrors'),\n            [],\n          );\n        }),\n        catchError((err) => {\n          const errors = [];\n          if (err instanceof NbAuthIllegalTokenError) {\n            errors.push(err.message);\n          } else {\n            errors.push('Something went wrong.');\n          }\n          return observableOf(new NbAuthResult(false, err, this.getOption('redirect.failure'), errors));\n        }),\n      );\n    },\n  };\n\n  protected redirectResults: { [key: string]: Function } = {\n    [NbOAuth2ResponseType.CODE]: () => {\n      return observableOf(this.route.snapshot.queryParams).pipe(\n        map((params: any) => !!(params && (params.code || params.error))),\n      );\n    },\n    [NbOAuth2ResponseType.TOKEN]: () => {\n      return observableOf(this.route.snapshot.fragment).pipe(\n        map((fragment) => this.parseHashAsQueryParams(fragment)),\n        map((params: any) => !!(params && (params.access_token || params.error))),\n      );\n    },\n  };\n\n  protected defaultOptions: NbOAuth2AuthStrategyOptions = auth2StrategyOptions;\n\n  constructor(protected http: HttpClient, protected route: ActivatedRoute, @Inject(NB_WINDOW) protected window: any) {\n    super();\n  }\n\n  authenticate(data?: any): Observable<NbAuthResult> {\n    if (this.getOption('token.grantType') === NbOAuth2GrantType.PASSWORD) {\n      return this.passwordToken(data.email, data.password);\n    } else {\n      return this.isRedirectResult().pipe(\n        switchMap((result: boolean) => {\n          if (!result) {\n            this.authorizeRedirect();\n            return observableOf(new NbAuthResult(true));\n          }\n          return this.getAuthorizationResult();\n        }),\n      );\n    }\n  }\n\n  getAuthorizationResult(): Observable<any> {\n    const redirectResultHandler = this.redirectResultHandlers[this.responseType];\n    if (redirectResultHandler) {\n      return redirectResultHandler.call(this);\n    }\n\n    throw new Error(`'${this.responseType}' responseType is not supported,\n                      only 'token' and 'code' are supported now`);\n  }\n\n  refreshToken(token: NbAuthRefreshableToken): Observable<NbAuthResult> {\n    const module = 'refresh';\n    const url = this.getActionEndpoint(module);\n    const requireValidToken = this.getOption(`${module}.requireValidToken`);\n\n    return this.http.post(url, this.buildRefreshRequestData(token), { headers: this.getHeaders() }).pipe(\n      map((res) => {\n        return new NbAuthResult(\n          true,\n          res,\n          this.getOption('redirect.success'),\n          [],\n          this.getOption('defaultMessages'),\n          this.createRefreshedToken(res, token, requireValidToken),\n        );\n      }),\n      catchError((res) => this.handleResponseError(res)),\n    );\n  }\n\n  passwordToken(username: string, password: string): Observable<NbAuthResult> {\n    const module = 'token';\n    const url = this.getActionEndpoint(module);\n    const requireValidToken = this.getOption(`${module}.requireValidToken`);\n\n    return this.http.post(url, this.buildPasswordRequestData(username, password), { headers: this.getHeaders() }).pipe(\n      map((res) => {\n        return new NbAuthResult(\n          true,\n          res,\n          this.getOption('redirect.success'),\n          [],\n          this.getOption('defaultMessages'),\n          this.createToken(res, requireValidToken),\n        );\n      }),\n      catchError((res) => this.handleResponseError(res)),\n    );\n  }\n\n  protected authorizeRedirect() {\n    this.window.location.href = this.buildRedirectUrl();\n  }\n\n  protected isRedirectResult(): Observable<boolean> {\n    return this.redirectResults[this.responseType].call(this);\n  }\n\n  protected requestToken(code: string) {\n    const module = 'token';\n    const url = this.getActionEndpoint(module);\n    const requireValidToken = this.getOption(`${module}.requireValidToken`);\n\n    return this.http.post(url, this.buildCodeRequestData(code), { headers: this.getHeaders() }).pipe(\n      map((res) => {\n        return new NbAuthResult(\n          true,\n          res,\n          this.getOption('redirect.success'),\n          [],\n          this.getOption('defaultMessages'),\n          this.createToken(res, requireValidToken),\n        );\n      }),\n      catchError((res) => this.handleResponseError(res)),\n    );\n  }\n\n  protected buildCodeRequestData(code: string): any {\n    const params = {\n      grant_type: this.getOption('token.grantType'),\n      code: code,\n      redirect_uri: this.getOption('token.redirectUri'),\n      client_id: this.getOption('clientId'),\n    };\n    return this.urlEncodeParameters(this.cleanParams(this.addCredentialsToParams(params)));\n  }\n\n  protected buildRefreshRequestData(token: NbAuthRefreshableToken): any {\n    const params = {\n      grant_type: this.getOption('refresh.grantType'),\n      refresh_token: token.getRefreshToken(),\n      scope: this.getOption('refresh.scope'),\n      client_id: this.getOption('clientId'),\n    };\n    return this.urlEncodeParameters(this.cleanParams(this.addCredentialsToParams(params)));\n  }\n\n  protected buildPasswordRequestData(username: string, password: string): string {\n    const params = {\n      grant_type: this.getOption('token.grantType'),\n      username: username,\n      password: password,\n      scope: this.getOption('token.scope'),\n    };\n    return this.urlEncodeParameters(this.cleanParams(this.addCredentialsToParams(params)));\n  }\n\n  protected buildAuthHeader(): HttpHeaders | undefined {\n    if (this.clientAuthMethod === NbOAuth2ClientAuthMethod.BASIC) {\n      if (this.getOption('clientId') && this.getOption('clientSecret')) {\n        return new HttpHeaders({\n          Authorization: 'Basic ' + btoa(this.getOption('clientId') + ':' + this.getOption('clientSecret')),\n        });\n      } else {\n        throw Error('For basic client authentication method, please provide both clientId & clientSecret.');\n      }\n    }\n    return undefined;\n  }\n\n  protected getHeaders(): HttpHeaders {\n    let headers = super.getHeaders();\n    headers = headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    const authHeaders = this.buildAuthHeader();\n    if (authHeaders === undefined) {\n      return headers;\n    }\n\n    for (const headerKey of authHeaders.keys()) {\n      for (const headerValue of authHeaders.getAll(headerKey)) {\n        headers = headers.append(headerKey, headerValue);\n      }\n    }\n\n    return headers;\n  }\n\n  protected cleanParams(params: any): any {\n    Object.entries(params).forEach(([key, val]) => !val && delete params[key]);\n    return params;\n  }\n\n  protected addCredentialsToParams(params: any): any {\n    if (this.clientAuthMethod === NbOAuth2ClientAuthMethod.REQUEST_BODY) {\n      if (this.getOption('clientId') && this.getOption('clientSecret')) {\n        return {\n          ...params,\n          client_id: this.getOption('clientId'),\n          client_secret: this.getOption('clientSecret'),\n        };\n      } else {\n        throw Error('For request body client authentication method, please provide both clientId & clientSecret.');\n      }\n    }\n    return params;\n  }\n\n  protected handleResponseError(res: any): Observable<NbAuthResult> {\n    let errors = [];\n    if (res instanceof HttpErrorResponse) {\n      if (res.error.error_description) {\n        errors.push(res.error.error_description);\n      } else {\n        errors = this.getOption('defaultErrors');\n      }\n    } else if (res instanceof NbAuthIllegalTokenError) {\n      errors.push(res.message);\n    } else {\n      errors.push('Something went wrong.');\n    }\n\n    return observableOf(new NbAuthResult(false, res, this.getOption('redirect.failure'), errors, []));\n  }\n\n  protected buildRedirectUrl() {\n    const params = {\n      response_type: this.getOption('authorize.responseType'),\n      client_id: this.getOption('clientId'),\n      redirect_uri: this.getOption('authorize.redirectUri'),\n      scope: this.getOption('authorize.scope'),\n      state: this.getOption('authorize.state'),\n\n      ...this.getOption('authorize.params'),\n    };\n\n    const endpoint = this.getActionEndpoint('authorize');\n    const query = this.urlEncodeParameters(this.cleanParams(params));\n\n    return `${endpoint}?${query}`;\n  }\n\n  protected parseHashAsQueryParams(hash: string): { [key: string]: string } {\n    return hash\n      ? hash.split('&').reduce((acc: any, part: string) => {\n          const item = part.split('=');\n          acc[item[0]] = decodeURIComponent(item[1]);\n          return acc;\n        }, {})\n      : {};\n  }\n\n  protected urlEncodeParameters(params: any): string {\n    return Object.keys(params)\n      .map((k) => {\n        return `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`;\n      })\n      .join('&');\n  }\n\n  protected createRefreshedToken(res, existingToken: NbAuthRefreshableToken, requireValidToken: boolean): NbAuthToken {\n    type AuthRefreshToken = NbAuthRefreshableToken & NbAuthToken;\n\n    const refreshedToken: AuthRefreshToken = this.createToken<AuthRefreshToken>(res, requireValidToken);\n    if (!refreshedToken.getRefreshToken() && existingToken.getRefreshToken()) {\n      refreshedToken.setRefreshToken(existingToken.getRefreshToken());\n    }\n    return refreshedToken;\n  }\n\n  register(data?: any): Observable<NbAuthResult> {\n    throw new Error('`register` is not supported by `NbOAuth2AuthStrategy`, use `authenticate`.');\n  }\n\n  requestPassword(data?: any): Observable<NbAuthResult> {\n    throw new Error('`requestPassword` is not supported by `NbOAuth2AuthStrategy`, use `authenticate`.');\n  }\n\n  resetPassword(data: any = {}): Observable<NbAuthResult> {\n    throw new Error('`resetPassword` is not supported by `NbOAuth2AuthStrategy`, use `authenticate`.');\n  }\n\n  logout(): Observable<NbAuthResult> {\n    return observableOf(new NbAuthResult(true));\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { NbAuthSimpleToken, NbAuthTokenClass } from '../../services/token/token';\nimport { NbAuthStrategyOptions } from '../auth-strategy-options';\nimport { getDeepFromObject } from '../../helpers';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\n\nexport interface NbPasswordStrategyModule {\n  alwaysFail?: boolean;\n  endpoint?: string;\n  method?: string;\n  redirect?: {\n    success?: string | null;\n    failure?: string | null;\n  };\n  requireValidToken?: boolean;\n  defaultErrors?: string[];\n  defaultMessages?: string[];\n}\n\nexport interface NbPasswordStrategyReset extends NbPasswordStrategyModule {\n  resetPasswordTokenKey?: string;\n}\n\nexport interface NbPasswordStrategyToken {\n  class?: NbAuthTokenClass,\n  key?: string,\n  getter?: Function,\n}\n\nexport interface NbPasswordStrategyMessage {\n  key?: string,\n  getter?: Function,\n}\n\nexport class NbPasswordAuthStrategyOptions extends NbAuthStrategyOptions {\n  baseEndpoint?: string = '/api/auth/';\n  login?: boolean | NbPasswordStrategyModule = {\n    alwaysFail: false,\n    endpoint: 'login',\n    method: 'post',\n    requireValidToken: true,\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Login/Email combination is not correct, please try again.'],\n    defaultMessages: ['You have been successfully logged in.'],\n  };\n  register?: boolean | NbPasswordStrategyModule = {\n    alwaysFail: false,\n    endpoint: 'register',\n    method: 'post',\n    requireValidToken: true,\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['You have been successfully registered.'],\n  };\n  requestPass?: boolean | NbPasswordStrategyModule = {\n    endpoint: 'request-pass',\n    method: 'post',\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['Reset password instructions have been sent to your email.'],\n  };\n  resetPass?: boolean | NbPasswordStrategyReset = {\n    endpoint: 'reset-pass',\n    method: 'put',\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    resetPasswordTokenKey: 'reset_password_token',\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['Your password has been successfully changed.'],\n  };\n  logout?: boolean | NbPasswordStrategyReset = {\n    alwaysFail: false,\n    endpoint: 'logout',\n    method: 'delete',\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['You have been successfully logged out.'],\n  };\n  refreshToken?: boolean | NbPasswordStrategyModule = {\n    endpoint: 'refresh-token',\n    method: 'post',\n    requireValidToken: true,\n    redirect: {\n      success: null,\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['Your token has been successfully refreshed.'],\n  };\n  token?: NbPasswordStrategyToken = {\n    class: NbAuthSimpleToken,\n    key: 'data.token',\n    getter: (module: string, res: HttpResponse<Object>, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n      res.body,\n      options.token.key,\n    ),\n  };\n  errors?: NbPasswordStrategyMessage = {\n    key: 'data.errors',\n    getter: (module: string, res: HttpErrorResponse, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n      res.error,\n      options.errors.key,\n      options[module].defaultErrors,\n    ),\n  };\n  messages?: NbPasswordStrategyMessage = {\n    key: 'data.messages',\n    getter: (module: string, res: HttpResponse<Object>, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n      res.body,\n      options.messages.key,\n      options[module].defaultMessages,\n    ),\n  };\n  validation?: {\n    password?: {\n      required?: boolean;\n      minLength?: number | null;\n      maxLength?: number | null;\n      regexp?: string | null;\n    };\n    email?: {\n      required?: boolean;\n      regexp?: string | null;\n    };\n    fullName?: {\n      required?: boolean;\n      minLength?: number | null;\n      maxLength?: number | null;\n      regexp?: string | null;\n    };\n  };\n}\n\nexport const passwordStrategyOptions: NbPasswordAuthStrategyOptions = new NbPasswordAuthStrategyOptions();\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { switchMap, map, catchError } from 'rxjs/operators';\n\nimport { NbAuthResult } from '../../services/auth-result';\nimport { NbAuthStrategy } from '../auth-strategy';\nimport { NbAuthStrategyClass } from '../../auth.options';\nimport { NbPasswordAuthStrategyOptions, passwordStrategyOptions } from './password-strategy-options';\nimport { NbAuthIllegalTokenError } from '../../services/token/token';\n\n/**\n * The most common authentication provider for email/password strategy.\n *\n * Strategy settings. Note, there is no need to copy over the whole object to change the settings you need.\n * Also, this.getOption call won't work outside of the default options declaration\n * (which is inside of the `NbPasswordAuthStrategy` class), so you have to replace it with a custom helper function\n * if you need it.\n *\n * ```ts\n *export class NbPasswordAuthStrategyOptions extends NbAuthStrategyOptions {\n *  name: string;\n *  baseEndpoint? = '/api/auth/';\n *  login?: boolean | NbPasswordStrategyModule = {\n *    alwaysFail: false,\n *    endpoint: 'login',\n *    method: 'post',\n *    requireValidToken: true,\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Login/Email combination is not correct, please try again.'],\n *    defaultMessages: ['You have been successfully logged in.'],\n *  };\n *  register?: boolean | NbPasswordStrategyModule = {\n *    alwaysFail: false,\n *    endpoint: 'register',\n *    method: 'post',\n *    requireValidToken: true,\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['You have been successfully registered.'],\n *  };\n *  requestPass?: boolean | NbPasswordStrategyModule = {\n *    endpoint: 'request-pass',\n *    method: 'post',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['Reset password instructions have been sent to your email.'],\n *  };\n *  resetPass?: boolean | NbPasswordStrategyReset = {\n *    endpoint: 'reset-pass',\n *    method: 'put',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    resetPasswordTokenKey: 'reset_password_token',\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['Your password has been successfully changed.'],\n *  };\n *  logout?: boolean | NbPasswordStrategyReset = {\n *    alwaysFail: false,\n *    endpoint: 'logout',\n *    method: 'delete',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['You have been successfully logged out.'],\n *  };\n *  refreshToken?: boolean | NbPasswordStrategyModule = {\n *    endpoint: 'refresh-token',\n *    method: 'post',\n *    requireValidToken: true,\n *    redirect: {\n *      success: null,\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['Your token has been successfully refreshed.'],\n *  };\n *  token?: NbPasswordStrategyToken = {\n *    class: NbAuthSimpleToken,\n *    key: 'data.token',\n *    getter: (module: string, res: HttpResponse<Object>, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n *      res.body,\n *      options.token.key,\n *    ),\n *  };\n *  errors?: NbPasswordStrategyMessage = {\n *    key: 'data.errors',\n *    getter: (module: string, res: HttpErrorResponse, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n *      res.error,\n *      options.errors.key,\n *      options[module].defaultErrors,\n *    ),\n *  };\n *  messages?: NbPasswordStrategyMessage = {\n *    key: 'data.messages',\n *    getter: (module: string, res: HttpResponse<Object>, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n *      res.body,\n *      options.messages.key,\n *      options[module].defaultMessages,\n *    ),\n *  };\n *  validation?: {\n *    password?: {\n *      required?: boolean;\n *      minLength?: number | null;\n *      maxLength?: number | null;\n *      regexp?: string | null;\n *    };\n *    email?: {\n *      required?: boolean;\n *      regexp?: string | null;\n *    };\n *    fullName?: {\n *      required?: boolean;\n *      minLength?: number | null;\n *      maxLength?: number | null;\n *      regexp?: string | null;\n *    };\n *  };\n *}\n * ```\n */\n@Injectable()\nexport class NbPasswordAuthStrategy extends NbAuthStrategy {\n  protected defaultOptions: NbPasswordAuthStrategyOptions = passwordStrategyOptions;\n\n  static setup(options: NbPasswordAuthStrategyOptions): [NbAuthStrategyClass, NbPasswordAuthStrategyOptions] {\n    return [NbPasswordAuthStrategy, options];\n  }\n\n  constructor(protected http: HttpClient, private route: ActivatedRoute) {\n    super();\n  }\n\n  authenticate(data?: any): Observable<NbAuthResult> {\n    const module = 'login';\n    const method = this.getOption(`${module}.method`);\n    const url = this.getActionEndpoint(module);\n    const requireValidToken = this.getOption(`${module}.requireValidToken`);\n    return this.http.request(method, url, { body: data, observe: 'response', headers: this.getHeaders() }).pipe(\n      map((res) => {\n        if (this.getOption(`${module}.alwaysFail`)) {\n          throw this.createFailResponse(data);\n        }\n        return res;\n      }),\n      map((res) => {\n        return new NbAuthResult(\n          true,\n          res,\n          this.getOption(`${module}.redirect.success`),\n          [],\n          this.getOption('messages.getter')(module, res, this.options),\n          this.createToken(this.getOption('token.getter')(module, res, this.options), requireValidToken),\n        );\n      }),\n      catchError((res) => {\n        return this.handleResponseError(res, module);\n      }),\n    );\n  }\n\n  register(data?: any): Observable<NbAuthResult> {\n    const module = 'register';\n    const method = this.getOption(`${module}.method`);\n    const url = this.getActionEndpoint(module);\n    const requireValidToken = this.getOption(`${module}.requireValidToken`);\n    return this.http.request(method, url, { body: data, observe: 'response', headers: this.getHeaders() }).pipe(\n      map((res) => {\n        if (this.getOption(`${module}.alwaysFail`)) {\n          throw this.createFailResponse(data);\n        }\n\n        return res;\n      }),\n      map((res) => {\n        return new NbAuthResult(\n          true,\n          res,\n          this.getOption(`${module}.redirect.success`),\n          [],\n          this.getOption('messages.getter')(module, res, this.options),\n          this.createToken(this.getOption('token.getter')('login', res, this.options), requireValidToken),\n        );\n      }),\n      catchError((res) => {\n        return this.handleResponseError(res, module);\n      }),\n    );\n  }\n\n  requestPassword(data?: any): Observable<NbAuthResult> {\n    const module = 'requestPass';\n    const method = this.getOption(`${module}.method`);\n    const url = this.getActionEndpoint(module);\n    return this.http.request(method, url, { body: data, observe: 'response', headers: this.getHeaders() }).pipe(\n      map((res) => {\n        if (this.getOption(`${module}.alwaysFail`)) {\n          throw this.createFailResponse();\n        }\n\n        return res;\n      }),\n      map((res) => {\n        return new NbAuthResult(\n          true,\n          res,\n          this.getOption(`${module}.redirect.success`),\n          [],\n          this.getOption('messages.getter')(module, res, this.options),\n        );\n      }),\n      catchError((res) => {\n        return this.handleResponseError(res, module);\n      }),\n    );\n  }\n\n  resetPassword(data: any = {}): Observable<NbAuthResult> {\n    const module = 'resetPass';\n    const method = this.getOption(`${module}.method`);\n    const url = this.getActionEndpoint(module);\n    const tokenKey = this.getOption(`${module}.resetPasswordTokenKey`);\n    data[tokenKey] = this.route.snapshot.queryParams[tokenKey];\n    return this.http.request(method, url, { body: data, observe: 'response', headers: this.getHeaders() }).pipe(\n      map((res) => {\n        if (this.getOption(`${module}.alwaysFail`)) {\n          throw this.createFailResponse();\n        }\n\n        return res;\n      }),\n      map((res) => {\n        return new NbAuthResult(\n          true,\n          res,\n          this.getOption(`${module}.redirect.success`),\n          [],\n          this.getOption('messages.getter')(module, res, this.options),\n        );\n      }),\n      catchError((res) => {\n        return this.handleResponseError(res, module);\n      }),\n    );\n  }\n\n  logout(): Observable<NbAuthResult> {\n    const module = 'logout';\n    const method = this.getOption(`${module}.method`);\n    const url = this.getActionEndpoint(module);\n\n    return observableOf({}).pipe(\n      switchMap((res: any) => {\n        if (!url) {\n          return observableOf(res);\n        }\n        return this.http.request(method, url, { observe: 'response', headers: this.getHeaders() });\n      }),\n      map((res) => {\n        if (this.getOption(`${module}.alwaysFail`)) {\n          throw this.createFailResponse();\n        }\n\n        return res;\n      }),\n      map((res) => {\n        return new NbAuthResult(\n          true,\n          res,\n          this.getOption(`${module}.redirect.success`),\n          [],\n          this.getOption('messages.getter')(module, res, this.options),\n        );\n      }),\n      catchError((res) => {\n        return this.handleResponseError(res, module);\n      }),\n    );\n  }\n\n  refreshToken(data?: any): Observable<NbAuthResult> {\n    const module = 'refreshToken';\n    const method = this.getOption(`${module}.method`);\n    const url = this.getActionEndpoint(module);\n    const requireValidToken = this.getOption(`${module}.requireValidToken`);\n\n    return this.http.request(method, url, { body: data, observe: 'response', headers: this.getHeaders() }).pipe(\n      map((res) => {\n        if (this.getOption(`${module}.alwaysFail`)) {\n          throw this.createFailResponse(data);\n        }\n\n        return res;\n      }),\n      map((res) => {\n        return new NbAuthResult(\n          true,\n          res,\n          this.getOption(`${module}.redirect.success`),\n          [],\n          this.getOption('messages.getter')(module, res, this.options),\n          this.createToken(this.getOption('token.getter')(module, res, this.options), requireValidToken),\n        );\n      }),\n      catchError((res) => {\n        return this.handleResponseError(res, module);\n      }),\n    );\n  }\n\n  protected handleResponseError(res: any, module: string): Observable<NbAuthResult> {\n    let errors = [];\n    if (res instanceof HttpErrorResponse) {\n      errors = this.getOption('errors.getter')(module, res, this.options);\n    } else if (res instanceof NbAuthIllegalTokenError) {\n      errors.push(res.message);\n    } else {\n      errors.push('Something went wrong.');\n    }\n    return observableOf(new NbAuthResult(false, res, this.getOption(`${module}.redirect.failure`), errors));\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'nb-auth-block',\n    styleUrls: ['./auth-block.component.scss'],\n    template: `\n    <ng-content></ng-content>\n  `,\n    standalone: false\n})\nexport class NbAuthBlockComponent {\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Component, OnDestroy } from '@angular/core';\nimport { Location } from '@angular/common';\n\nimport { NbAuthService } from '../services/auth.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'nb-auth',\n    styleUrls: ['./auth.component.scss'],\n    template: `\n    <nb-layout>\n      <nb-layout-column>\n        <nb-card>\n          <nb-card-header>\n            <nav class=\"navigation\">\n              <a href=\"#\" (click)=\"back()\" class=\"link back-link\" aria-label=\"Back\">\n                <nb-icon icon=\"arrow-back\"></nb-icon>\n              </a>\n            </nav>\n          </nb-card-header>\n          <nb-card-body>\n            <nb-auth-block>\n              <router-outlet></router-outlet>\n            </nb-auth-block>\n          </nb-card-body>\n        </nb-card>\n      </nb-layout-column>\n    </nb-layout>\n  `,\n    standalone: false\n})\nexport class NbAuthComponent implements OnDestroy {\n\n  private destroy$ = new Subject<void>();\n\n  subscription: any;\n\n  authenticated: boolean = false;\n  token: string = '';\n\n  // showcase of how to use the onAuthenticationChange method\n  constructor(protected auth: NbAuthService, protected location: Location) {\n\n    this.subscription = auth.onAuthenticationChange()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((authenticated: boolean) => {\n        this.authenticated = authenticated;\n      });\n  }\n\n  back() {\n    this.location.back();\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NB_AUTH_OPTIONS, NbAuthSocialLink } from '../../auth.options';\nimport { getDeepFromObject } from '../../helpers';\n\nimport { NbAuthService } from '../../services/auth.service';\nimport { NbAuthResult } from '../../services/auth-result';\n\n@Component({\n    selector: 'nb-login',\n    templateUrl: './login.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: false\n})\nexport class NbLoginComponent {\n\n  redirectDelay: number = 0;\n  showMessages: any = {};\n  strategy: string = '';\n\n  errors: string[] = [];\n  messages: string[] = [];\n  user: any = {};\n  submitted: boolean = false;\n  socialLinks: NbAuthSocialLink[] = [];\n  rememberMe = false;\n\n  constructor(protected service: NbAuthService,\n              @Inject(NB_AUTH_OPTIONS) protected options = {},\n              protected cd: ChangeDetectorRef,\n              protected router: Router) {\n\n    this.redirectDelay = this.getConfigValue('forms.login.redirectDelay');\n    this.showMessages = this.getConfigValue('forms.login.showMessages');\n    this.strategy = this.getConfigValue('forms.login.strategy');\n    this.socialLinks = this.getConfigValue('forms.login.socialLinks');\n    this.rememberMe = this.getConfigValue('forms.login.rememberMe');\n  }\n\n  login(): void {\n    this.errors = [];\n    this.messages = [];\n    this.submitted = true;\n\n    this.service.authenticate(this.strategy, this.user).subscribe((result: NbAuthResult) => {\n      this.submitted = false;\n\n      if (result.isSuccess()) {\n        this.messages = result.getMessages();\n      } else {\n        this.errors = result.getErrors();\n      }\n\n      const redirect = result.getRedirect();\n      if (redirect) {\n        setTimeout(() => {\n          return this.router.navigateByUrl(redirect);\n        }, this.redirectDelay);\n      }\n      this.cd.detectChanges();\n    });\n  }\n\n  getConfigValue(key: string): any {\n    return getDeepFromObject(this.options, key, null);\n  }\n}\n","<h1 id=\"title\" class=\"title\">Login</h1>\n<p class=\"sub-title\">Hello! Log in with your email.</p>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"login()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input nbInput\n           fullWidth\n           [(ngModel)]=\"user.email\"\n           #email=\"ngModel\"\n           name=\"email\"\n           id=\"input-email\"\n           pattern=\".+@.+\\..+\"\n           placeholder=\"Email address\"\n           fieldSize=\"large\"\n           autofocus\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <span class=\"label-with-link\">\n      <label class=\"label\" for=\"input-password\">Password:</label>\n      <a class=\"forgot-password caption-2\" routerLink=\"../request-password\">Forgot Password?</a>\n    </span>\n    <input nbInput\n           fullWidth\n           [(ngModel)]=\"user.password\"\n           #password=\"ngModel\"\n           name=\"password\"\n           type=\"password\"\n           id=\"input-password\"\n           placeholder=\"Password\"\n           fieldSize=\"large\"\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched \">\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contain\n        from {{ getConfigValue('forms.validation.password.minLength') }}\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group accept-group\">\n    <nb-checkbox name=\"rememberMe\" [(ngModel)]=\"user.rememberMe\" *ngIf=\"rememberMe\">Remember me</nb-checkbox>\n  </div>\n\n  <button nbButton\n          fullWidth\n          status=\"primary\"\n          size=\"large\"\n          [disabled]=\"submitted || !form.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Log In\n  </button>\n</form>\n\n<section *ngIf=\"socialLinks && socialLinks.length > 0\" class=\"links\" aria-label=\"Social sign in\">\n  or enter with:\n  <div class=\"socials\">\n    <ng-container *ngFor=\"let socialLink of socialLinks\">\n      <a *ngIf=\"socialLink.link\"\n         [routerLink]=\"socialLink.link\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n      <a *ngIf=\"socialLink.url\"\n         [attr.href]=\"socialLink.url\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n    </ng-container>\n  </div>\n</section>\n\n<section class=\"another-action\" aria-label=\"Register\">\n  Don't have an account? <a class=\"text-link\" routerLink=\"../register\">Register</a>\n</section>\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NB_AUTH_OPTIONS, NbAuthSocialLink } from '../../auth.options';\nimport { getDeepFromObject } from '../../helpers';\n\nimport { NbAuthService } from '../../services/auth.service';\nimport { NbAuthResult } from '../../services/auth-result';\n\n\n@Component({\n    selector: 'nb-register',\n    styleUrls: ['./register.component.scss'],\n    templateUrl: './register.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: false\n})\nexport class NbRegisterComponent {\n\n  redirectDelay: number = 0;\n  showMessages: any = {};\n  strategy: string = '';\n\n  submitted = false;\n  errors: string[] = [];\n  messages: string[] = [];\n  user: any = {};\n  socialLinks: NbAuthSocialLink[] = [];\n\n  constructor(protected service: NbAuthService,\n              @Inject(NB_AUTH_OPTIONS) protected options = {},\n              protected cd: ChangeDetectorRef,\n              protected router: Router) {\n\n    this.redirectDelay = this.getConfigValue('forms.register.redirectDelay');\n    this.showMessages = this.getConfigValue('forms.register.showMessages');\n    this.strategy = this.getConfigValue('forms.register.strategy');\n    this.socialLinks = this.getConfigValue('forms.login.socialLinks');\n  }\n\n  register(): void {\n    this.errors = this.messages = [];\n    this.submitted = true;\n\n    this.service.register(this.strategy, this.user).subscribe((result: NbAuthResult) => {\n      this.submitted = false;\n      if (result.isSuccess()) {\n        this.messages = result.getMessages();\n      } else {\n        this.errors = result.getErrors();\n      }\n\n      const redirect = result.getRedirect();\n      if (redirect) {\n        setTimeout(() => {\n          return this.router.navigateByUrl(redirect);\n        }, this.redirectDelay);\n      }\n      this.cd.detectChanges();\n    });\n  }\n\n  getConfigValue(key: string): any {\n    return getDeepFromObject(this.options, key, null);\n  }\n}\n","<h1 id=\"title\" class=\"title\">Register</h1>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"register()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-name\">Full name:</label>\n    <input nbInput\n           [(ngModel)]=\"user.fullName\"\n           #fullName=\"ngModel\"\n           id=\"input-name\"\n           name=\"fullName\"\n           placeholder=\"Full name\"\n           autofocus\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"fullName.dirty ? (fullName.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.fullName.required')\"\n           [minlength]=\"getConfigValue('forms.validation.fullName.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.fullName.maxLength')\"\n           [attr.aria-invalid]=\"fullName.invalid && fullName.touched ? true : null\">\n    <ng-container *ngIf=\"fullName.invalid && fullName.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"fullName.errors?.required\">\n        Full name is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"fullName.errors?.minlength || fullName.errors?.maxlength\">\n        Full name should contains\n        from {{getConfigValue('forms.validation.fullName.minLength')}}\n        to {{getConfigValue('forms.validation.fullName.maxLength')}}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input nbInput\n           [(ngModel)]=\"user.email\"\n           #email=\"ngModel\"\n           id=\"input-email\"\n           name=\"email\"\n           pattern=\".+@.+..+\"\n           placeholder=\"Email address\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">Password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.password\"\n           #password=\"ngModel\"\n           type=\"password\"\n           id=\"input-password\"\n           name=\"password\"\n           placeholder=\"Password\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contain\n        from {{ getConfigValue('forms.validation.password.minLength') }}\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-re-password\">Repeat password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.confirmPassword\"\n           #rePass=\"ngModel\"\n           type=\"password\"\n           id=\"input-re-password\"\n           name=\"rePass\"\n           placeholder=\"Confirm Password\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"rePass.dirty ? (rePass.invalid || password.value != rePass.value  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [attr.aria-invalid]=\"rePass.invalid && rePass.touched ? true : null\">\n    <ng-container *ngIf=\"rePass.invalid && rePass.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"rePass.errors?.required\">\n        Password confirmation is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.value != rePass.value && !rePass.errors?.required\">\n        Password does not match the confirm password.\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group accept-group\" *ngIf=\"getConfigValue('forms.register.terms')\">\n    <nb-checkbox name=\"terms\" [(ngModel)]=\"user.terms\" [required]=\"getConfigValue('forms.register.terms')\">\n      Agree to <a href=\"#\" target=\"_blank\"><strong>Terms & Conditions</strong></a>\n    </nb-checkbox>\n  </div>\n\n  <button nbButton\n          fullWidth\n          status=\"primary\"\n          size=\"large\"\n          [disabled]=\"submitted || !form.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Register\n  </button>\n</form>\n\n<section *ngIf=\"socialLinks && socialLinks.length > 0\" class=\"links\" aria-label=\"Social sign in\">\n  or enter with:\n  <div class=\"socials\">\n    <ng-container *ngFor=\"let socialLink of socialLinks\">\n      <a *ngIf=\"socialLink.link\"\n         [routerLink]=\"socialLink.link\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n      <a *ngIf=\"socialLink.url\"\n         [attr.href]=\"socialLink.url\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n    </ng-container>\n  </div>\n</section>\n\n<section class=\"another-action\" aria-label=\"Sign in\">\n  Already have an account? <a class=\"text-link\" routerLink=\"../login\">Log in</a>\n</section>\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { NB_AUTH_OPTIONS } from '../../auth.options';\nimport { getDeepFromObject } from '../../helpers';\nimport { NbAuthService } from '../../services/auth.service';\nimport { NbAuthResult } from '../../services/auth-result';\n\n@Component({\n    selector: 'nb-logout',\n    templateUrl: './logout.component.html',\n    standalone: false\n})\nexport class NbLogoutComponent implements OnInit {\n\n  redirectDelay: number = 0;\n  strategy: string = '';\n\n  constructor(protected service: NbAuthService,\n              @Inject(NB_AUTH_OPTIONS) protected options = {},\n              protected router: Router) {\n    this.redirectDelay = this.getConfigValue('forms.logout.redirectDelay');\n    this.strategy = this.getConfigValue('forms.logout.strategy');\n  }\n\n  ngOnInit(): void {\n    this.logout(this.strategy);\n  }\n\n  logout(strategy: string): void {\n    this.service.logout(strategy).subscribe((result: NbAuthResult) => {\n\n      const redirect = result.getRedirect();\n      if (redirect) {\n        setTimeout(() => {\n          return this.router.navigateByUrl(redirect);\n        }, this.redirectDelay);\n      }\n    });\n  }\n\n  getConfigValue(key: string): any {\n    return getDeepFromObject(this.options, key, null);\n  }\n}\n","<div>Logging out, please wait...</div>\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NB_AUTH_OPTIONS } from '../../auth.options';\nimport { getDeepFromObject } from '../../helpers';\n\nimport { NbAuthService } from '../../services/auth.service';\nimport { NbAuthResult } from '../../services/auth-result';\n\n@Component({\n    selector: 'nb-request-password-page',\n    styleUrls: ['./request-password.component.scss'],\n    templateUrl: './request-password.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: false\n})\nexport class NbRequestPasswordComponent {\n\n  redirectDelay: number = 0;\n  showMessages: any = {};\n  strategy: string = '';\n\n  submitted = false;\n  errors: string[] = [];\n  messages: string[] = [];\n  user: any = {};\n\n  constructor(protected service: NbAuthService,\n              @Inject(NB_AUTH_OPTIONS) protected options = {},\n              protected cd: ChangeDetectorRef,\n              protected router: Router) {\n\n    this.redirectDelay = this.getConfigValue('forms.requestPassword.redirectDelay');\n    this.showMessages = this.getConfigValue('forms.requestPassword.showMessages');\n    this.strategy = this.getConfigValue('forms.requestPassword.strategy');\n  }\n\n  requestPass(): void {\n    this.errors = this.messages = [];\n    this.submitted = true;\n\n    this.service.requestPassword(this.strategy, this.user).subscribe((result: NbAuthResult) => {\n      this.submitted = false;\n      if (result.isSuccess()) {\n        this.messages = result.getMessages();\n      } else {\n        this.errors = result.getErrors();\n      }\n\n      const redirect = result.getRedirect();\n      if (redirect) {\n        setTimeout(() => {\n          return this.router.navigateByUrl(redirect);\n        }, this.redirectDelay);\n      }\n      this.cd.detectChanges();\n    });\n  }\n\n  getConfigValue(key: string): any {\n    return getDeepFromObject(this.options, key, null);\n  }\n}\n","<h1 id=\"title\" class=\"title\">Forgot Password</h1>\n<p class=\"sub-title\">Enter your email address and we’ll send a link to reset your password</p>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"requestPass()\" #requestPassForm=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Enter your email address:</label>\n    <input nbInput\n           [(ngModel)]=\"user.email\"\n           #email=\"ngModel\"\n           id=\"input-email\"\n           name=\"email\"\n           pattern=\".+@.+\\..+\"\n           placeholder=\"Email address\"\n           autofocus\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <button nbButton\n          fullWidth\n          status=\"primary\"\n          size=\"large\"\n          [disabled]=\"submitted || !requestPassForm.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Request password\n  </button>\n</form>\n\n<section class=\"sign-in-or-up\" aria-label=\"Sign in or sign up\">\n  <p><a class=\"text-link\" routerLink=\"../login\">Back to Log In</a></p>\n  <p><a routerLink=\"../register\" class=\"text-link\">Register</a></p>\n</section>\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NB_AUTH_OPTIONS } from '../../auth.options';\nimport { getDeepFromObject } from '../../helpers';\n\nimport { NbAuthService } from '../../services/auth.service';\nimport { NbAuthResult } from '../../services/auth-result';\n\n@Component({\n    selector: 'nb-reset-password-page',\n    styleUrls: ['./reset-password.component.scss'],\n    templateUrl: './reset-password.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: false\n})\nexport class NbResetPasswordComponent {\n\n  redirectDelay: number = 0;\n  showMessages: any = {};\n  strategy: string = '';\n\n  submitted = false;\n  errors: string[] = [];\n  messages: string[] = [];\n  user: any = {};\n\n  constructor(protected service: NbAuthService,\n              @Inject(NB_AUTH_OPTIONS) protected options = {},\n              protected cd: ChangeDetectorRef,\n              protected router: Router) {\n\n    this.redirectDelay = this.getConfigValue('forms.resetPassword.redirectDelay');\n    this.showMessages = this.getConfigValue('forms.resetPassword.showMessages');\n    this.strategy = this.getConfigValue('forms.resetPassword.strategy');\n  }\n\n  resetPass(): void {\n    this.errors = this.messages = [];\n    this.submitted = true;\n\n    this.service.resetPassword(this.strategy, this.user).subscribe((result: NbAuthResult) => {\n      this.submitted = false;\n      if (result.isSuccess()) {\n        this.messages = result.getMessages();\n      } else {\n        this.errors = result.getErrors();\n      }\n\n      const redirect = result.getRedirect();\n      if (redirect) {\n        setTimeout(() => {\n          return this.router.navigateByUrl(redirect);\n        }, this.redirectDelay);\n      }\n      this.cd.detectChanges();\n    });\n  }\n\n  getConfigValue(key: string): any {\n    return getDeepFromObject(this.options, key, null);\n  }\n}\n","<h1 id=\"title\" class=\"title\">Change password</h1>\n<p class=\"sub-title\">Please set a new password</p>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"resetPass()\" #resetPassForm=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">New Password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.password\"\n           #password=\"ngModel\"\n           type=\"password\"\n           id=\"input-password\"\n           name=\"password\"\n           class=\"first\"\n           placeholder=\"New Password\"\n           autofocus\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contains\n        from {{getConfigValue('forms.validation.password.minLength')}}\n        to {{getConfigValue('forms.validation.password.maxLength')}}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-group\">\n    <label class=\"label\" for=\"input-re-password\">Confirm Password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.confirmPassword\"\n           #rePass=\"ngModel\"\n           id=\"input-re-password\"\n           name=\"rePass\"\n           type=\"password\"\n           class=\"last\"\n           placeholder=\"Confirm Password\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"rePass.touched\n               ? (rePass.invalid || password.value != rePass.value ? 'danger' : 'success')\n               : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [attr.aria-invalid]=\"rePass.invalid && rePass.touched ? true : null\">\n    <ng-container *ngIf=\"rePass.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"rePass.invalid && rePass.errors?.required\">\n        Password confirmation is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.value != rePass.value && !rePass.errors?.required\">\n        Password does not match the confirm password.\n      </p>\n    </ng-container>\n  </div>\n\n  <button nbButton\n          status=\"primary\"\n          fullWidth\n          size=\"large\"\n          [disabled]=\"submitted || !resetPassForm.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Change password\n  </button>\n</form>\n\n<section class=\"sign-in-or-up\" aria-label=\"Sign in or sign up\">\n  <p><a class=\"text-link\" routerLink=\"../login\">Back to Log In</a></p>\n  <p><a class=\"text-link\" routerLink=\"../register\">Register</a></p>\n</section>\n","import { Injector, ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { HttpRequest } from '@angular/common/http';\n\nimport {\n  NbAlertModule,\n  NbButtonModule,\n  NbCardModule,\n  NbCheckboxModule,\n  NbIconModule,\n  NbInputModule,\n  NbLayoutModule,\n} from '@nebular/theme';\n\nimport { NbAuthService } from './services/auth.service';\nimport { NbAuthSimpleToken, NbAuthTokenClass } from './services/token/token';\nimport { NbTokenLocalStorage, NbTokenStorage } from './services/token/token-storage';\nimport { NbTokenService } from './services/token/token.service';\nimport { NbAuthTokenParceler, NB_AUTH_FALLBACK_TOKEN } from './services/token/token-parceler';\nimport { NbAuthStrategy } from './strategies/auth-strategy';\nimport { NbAuthStrategyOptions } from './strategies/auth-strategy-options';\nimport { NbDummyAuthStrategy } from './strategies/dummy/dummy-strategy';\nimport { NbOAuth2AuthStrategy } from './strategies/oauth2/oauth2-strategy';\nimport { NbPasswordAuthStrategy } from './strategies/password/password-strategy';\n\nimport {\n  defaultAuthOptions,\n  NB_AUTH_INTERCEPTOR_HEADER,\n  NB_AUTH_OPTIONS,\n  NB_AUTH_STRATEGIES,\n  NB_AUTH_TOKEN_INTERCEPTOR_FILTER,\n  NB_AUTH_TOKENS,\n  NB_AUTH_USER_OPTIONS,\n  NbAuthOptions,\n  NbAuthStrategyClass,\n} from './auth.options';\n\nimport { NbAuthComponent } from './components/auth.component';\n\nimport { NbAuthBlockComponent } from './components/auth-block/auth-block.component';\nimport { NbLoginComponent } from './components/login/login.component';\nimport { NbRegisterComponent } from './components/register/register.component';\nimport { NbLogoutComponent } from './components/logout/logout.component';\nimport { NbRequestPasswordComponent } from './components/request-password/request-password.component';\nimport { NbResetPasswordComponent } from './components/reset-password/reset-password.component';\n\nimport { deepExtend } from './helpers';\n\nexport function nbStrategiesFactory(options: NbAuthOptions, injector: Injector): NbAuthStrategy[] {\n  const strategies = [];\n  options.strategies\n    .forEach(([strategyClass, strategyOptions]: [NbAuthStrategyClass, NbAuthStrategyOptions]) => {\n      const strategy: NbAuthStrategy = injector.get(strategyClass);\n      strategy.setOptions(strategyOptions);\n\n      strategies.push(strategy);\n    });\n  return strategies;\n}\n\nexport function nbTokensFactory(strategies: NbAuthStrategy[]): NbAuthTokenClass[] {\n  const tokens = [];\n  strategies\n    .forEach((strategy: NbAuthStrategy) => {\n      tokens.push(strategy.getOption('token.class'));\n    });\n  return tokens;\n}\n\nexport function nbOptionsFactory(options) {\n  return deepExtend(defaultAuthOptions, options);\n}\n\nexport function nbNoOpInterceptorFilter(req: HttpRequest<any>): boolean {\n  return true;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NbLayoutModule,\n    NbCardModule,\n    NbCheckboxModule,\n    NbAlertModule,\n    NbInputModule,\n    NbButtonModule,\n    RouterModule,\n    FormsModule,\n    NbIconModule,\n  ],\n  declarations: [\n    NbAuthComponent,\n    NbAuthBlockComponent,\n    NbLoginComponent,\n    NbRegisterComponent,\n    NbRequestPasswordComponent,\n    NbResetPasswordComponent,\n    NbLogoutComponent,\n  ],\n  exports: [\n    NbAuthComponent,\n    NbAuthBlockComponent,\n    NbLoginComponent,\n    NbRegisterComponent,\n    NbRequestPasswordComponent,\n    NbResetPasswordComponent,\n    NbLogoutComponent,\n  ],\n})\nexport class NbAuthModule {\n  static forRoot(nbAuthOptions?: NbAuthOptions): ModuleWithProviders<NbAuthModule> {\n    return {\n      ngModule: NbAuthModule,\n      providers: [\n        { provide: NB_AUTH_USER_OPTIONS, useValue: nbAuthOptions },\n        { provide: NB_AUTH_OPTIONS, useFactory: nbOptionsFactory, deps: [NB_AUTH_USER_OPTIONS] },\n        { provide: NB_AUTH_STRATEGIES, useFactory: nbStrategiesFactory, deps: [NB_AUTH_OPTIONS, Injector] },\n        { provide: NB_AUTH_TOKENS, useFactory: nbTokensFactory, deps: [NB_AUTH_STRATEGIES] },\n        { provide: NB_AUTH_FALLBACK_TOKEN, useValue: NbAuthSimpleToken },\n        { provide: NB_AUTH_INTERCEPTOR_HEADER, useValue: 'Authorization' },\n        { provide: NB_AUTH_TOKEN_INTERCEPTOR_FILTER, useValue: nbNoOpInterceptorFilter },\n        { provide: NbTokenStorage, useClass: NbTokenLocalStorage },\n        NbAuthTokenParceler,\n        NbAuthService,\n        NbTokenService,\n        NbDummyAuthStrategy,\n        NbPasswordAuthStrategy,\n        NbOAuth2AuthStrategy,\n      ],\n    };\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Routes } from '@angular/router';\n\nimport { NbAuthComponent } from './components/auth.component';\nimport { NbLoginComponent } from './components/login/login.component';\nimport { NbRegisterComponent } from './components/register/register.component';\nimport { NbLogoutComponent } from './components/logout/logout.component';\nimport { NbRequestPasswordComponent } from './components/request-password/request-password.component';\nimport { NbResetPasswordComponent } from './components/reset-password/reset-password.component';\n\nexport const routes: Routes = [\n  {\n    path: 'auth',\n    component: NbAuthComponent,\n    children: [\n      {\n        path: '',\n        component: NbLoginComponent,\n      },\n      {\n        path: 'login',\n        component: NbLoginComponent,\n      },\n      {\n        path: 'register',\n        component: NbRegisterComponent,\n      },\n      {\n        path: 'logout',\n        component: NbLogoutComponent,\n      },\n      {\n        path: 'request-password',\n        component: NbRequestPasswordComponent,\n      },\n      {\n        path: 'reset-password',\n        component: NbResetPasswordComponent,\n      },\n    ],\n  },\n];\n","import { Inject, Injectable, Injector } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { NbAuthToken } from '../token/token';\nimport { NbAuthService } from '../auth.service';\nimport { NB_AUTH_TOKEN_INTERCEPTOR_FILTER } from '../../auth.options';\n\n@Injectable()\nexport class NbAuthJWTInterceptor implements HttpInterceptor {\n\n  constructor(private injector: Injector,\n              @Inject(NB_AUTH_TOKEN_INTERCEPTOR_FILTER) protected filter) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // do not intercept request whose urls are filtered by the injected filter\n      if (!this.filter(req)) {\n        return this.authService.isAuthenticatedOrRefresh()\n          .pipe(\n            switchMap(authenticated => {\n              if (authenticated) {\n                  return this.authService.getToken().pipe(\n                    switchMap((token: NbAuthToken) => {\n                      const JWT = `Bearer ${token.getValue()}`;\n                      req = req.clone({\n                        setHeaders: {\n                          Authorization: JWT,\n                        },\n                      });\n                      return next.handle(req);\n                    }),\n                  )\n              } else {\n                 // Request is sent to server without authentication so that the client code\n                 // receives the 401/403 error and can act as desired ('session expired', redirect to login, aso)\n                return next.handle(req);\n              }\n            }),\n          )\n      } else {\n      return next.handle(req);\n    }\n  }\n\n  protected get authService(): NbAuthService {\n    return this.injector.get(NbAuthService);\n  }\n\n}\n","import { Inject, Injectable, Injector } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { NbAuthService } from '../auth.service';\nimport { NB_AUTH_INTERCEPTOR_HEADER } from '../../auth.options';\nimport { NbAuthToken } from '../token/token';\n\n@Injectable()\nexport class NbAuthSimpleInterceptor implements HttpInterceptor {\n  constructor(\n    private injector: Injector,\n    @Inject(NB_AUTH_INTERCEPTOR_HEADER) protected headerName: string = 'Authorization',\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.authService.getToken().pipe(\n      switchMap((token: NbAuthToken) => {\n        if (token && token.getValue()) {\n          req = req.clone({\n            setHeaders: {\n              [this.headerName]: token.getValue(),\n            },\n          });\n        }\n        return next.handle(req);\n      }),\n    );\n  }\n\n  protected get authService(): NbAuthService {\n    return this.injector.get(NbAuthService);\n  }\n}\n","export class NbUser {\n\n  constructor(public id?: number,\n              public email?: string,\n              public password?: string,\n              public rememberMe?: boolean,\n              public terms?: boolean,\n              public confirmPassword?: string,\n              public fullName?: string) {\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nexport * from './auth.options';\nexport * from './auth.module';\nexport * from './auth.routes';\n\nexport * from './components/auth.component';\nexport * from './components/auth-block/auth-block.component';\nexport * from './components/login/login.component';\nexport * from './components/logout/logout.component';\nexport * from './components/register/register.component';\nexport * from './components/request-password/request-password.component';\nexport * from './components/reset-password/reset-password.component';\nexport * from './services/auth.service';\nexport * from './services/auth-result';\nexport * from './services/interceptors/jwt-interceptor';\nexport * from './services/interceptors/simple-interceptor';\nexport * from './services/token/token';\nexport * from './services/token/token-storage';\nexport * from './services/token/token.service';\nexport * from './services/token/token-parceler';\nexport * from './strategies/auth-strategy';\nexport * from './strategies/auth-strategy-options';\nexport * from './strategies/dummy/dummy-strategy';\nexport * from './strategies/dummy/dummy-strategy-options';\nexport * from './strategies/password/password-strategy';\nexport * from './strategies/password/password-strategy-options';\nexport * from './strategies/oauth2/oauth2-strategy';\nexport * from './strategies/oauth2/oauth2-strategy.options';\nexport * from './models/user';\n\nexport * from './helpers';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.NbAuthTokenParceler","observableOf","i1.NbTokenStorage","i1.NbAuthService","i2","i3","i4","i5.NbAuthBlockComponent"],"mappings":"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"}